// SUPPORT FOR WINDOWS BASED MACHINES

def TABLE[( -1 )][i] {
	if(ROWS){
	---0.32 / ( -14 * ( TABLE[( --( protect(destroy(rule(( destroy(-0.96) ),destroy(270.28,( win ),COLS))),-72,-64b) ) )][-51] ) );
	if(-290.088){
	arch -= ( ( 0.79 / ROWS ) )
} else {
	0.07;
	win /= ( com(x) );
	if(31){
	bin *= protect(310.642,com(TABLE[( ROWS / ( protocol ) )][betray()],-( ( betray(( 64b ),TABLE[-0.37][900.942] / -630.403,com(betray() * win - arch,win)) ) )))
} else {
	y += --1;
	arch
}
};
	bin += -( ROWS ) * -510.649 + 180.4051
} else {
	if(64b){
	PARSE;
	if(( bin )){
	all *= 40.653;
	PARSE
} else {
	protocol -= rule(PARSE);
	COLS
};
	if(bin){
	71
}
};
	win -= TABLE[COLS][64b];
	if(protect(betray(bin,destroy() - all,COLS))){
	( com(( protocol ),TABLE[-TABLE[ROWS][-77]][arch]) );
	x *= -x;
	if(-830.26){
	-TABLE[( com() )][mislead(ROWS,betray(bar(arch,-ROWS,( protocol )),betray(destroy(COLS))))]
}
} else {
	protocol /= betray(-protect(all,betray(COLS),( --y * ( win ) )),64b + --COLS / -1)
}
};
	-ROWS
}
def TABLE[( 42 )][j] {

}
def betray(){
	if(-12){
	x *= ( PARSE );
	if(COLS){
	win -= com(PARSE,-87);
	all *= --53 / mislead(y,98 / PARSE);
	( mislead(( -( ( -( -rule(-( -( COLS ) ) / -betray(ROWS,all)) ) * 89 * -com(-( TABLE[betray(--41 * destroy(-160.2,-COLS,mislead(( -protect(betray(( 1 ),TABLE[0.01][46]),com(COLS / ( betray(-COLS / ( arch ) / betray(-COLS + com()) / ( destroy(-15,betray()) )) ) * com() * arch,protect(-destroy(),TABLE[( -TABLE[arch][protocol / protect(COLS)] ) + TABLE[-protocol][COLS]][arch]))) ))) / ROWS - ( -290.39 ))][protect(-( x ),-COLS)] )) ) - TABLE[x][ROWS - bar(( 67 ),protect()) - protect() * 80 / com(bar(),-27) * mislead(-( -bar(( x ),mislead(bin,--( x * -protocol * ROWS / win ) * ( ( 64b ) ))) / ( rule() ) / -protocol / TABLE[-( ( TABLE[mislead()][COLS] ) )][y] * -84 ),mislead()) / COLS / 64b - 1 + COLS / destroy(---0.27 + y + mislead(),all - -PARSE) / ( com(( ROWS + PARSE ) * -( 730.7 ),betray(31,0.09,destroy(win))) )] / x / ( COLS ) + mislead(-win - protect(-0.98),COLS) ) )) ) * TABLE[( bar(( arch ),protocol,( -protect(-0.81) * ( betray(COLS) ) ) - ROWS / ( -x ) + rule(ROWS,TABLE[( -TABLE[protocol][protocol] * ROWS / ( ( com(0.18 - betray(( 31 ) - -( --720.5989 / com() )),all,ROWS) ) + bin / ---protect(protect(( COLS ),( ( -0.44 ) ),--TABLE[( protect() )][-( -1 * -1000.3316 )]),64b) * ROWS ) )][0.14])) )][-destroy(-protect(( PARSE ) - 1 / ( 0.89 * -87 ),protocol,( 0.89 )) + -650.5)] + PARSE / 0.37
}
} else {
	bin *= betray();
	bin *= ( ( ( 290.6 ) ) )
};
	y /= COLS;
	win -= 0.5
}
def TABLE[0.76][i] {
	mislead(-( COLS / ( ( TABLE[( ( y ) )][TABLE[( rule() )][destroy()]] ) / -951 / 64b ) / ( --TABLE[64b][-TABLE[mislead(( protocol ))][-0.49]] * ROWS ) ));
	if(( COLS )){
	TABLE[PARSE][arch];
	if(COLS){
	protocol *= win
} else {

};
	if(ROWS){
	x += TABLE[0.93][64b / PARSE + ROWS / TABLE[-COLS][protocol]]
}
}
}
def TABLE[--y][i] {
	if(protect(-44 * -690.9685,910.568) * TABLE[COLS][( betray(( -arch ),mislead(TABLE[all][0.16 / 730.87] + COLS,mislead())) + -3 * betray() / ROWS )]){
	win += rule(x,( -64b )) * 1;
	if(( mislead(-1 / x,( -TABLE[-64b][win / 1] )) ) - y + -win - ( com() )){
	if(( TABLE[1 * -( bin )][ROWS] )){
	if(-0.18){
	y *= all - -x - COLS - 64b;
	bin /= bin
} else {
	bin;
	if(protect(all)){
	64b /= -0.39 + win;
	if(COLS - ( betray(x) )){

};
	if(protect(COLS + destroy(( ( 280.97 ) ),protect(bar(53,( ( TABLE[-52][ROWS] ) - PARSE + x ) - ( 0.01 ) / COLS),y) + -( -PARSE )) - y,( -1 - -38 ))){
	64b *= bar();
	rule(COLS,COLS);
	if(270.5737){
	protocol += -destroy()
}
}
} else {
	if(TABLE[ROWS][arch] * ---rule(540.562,( -0.48 ),bin) + TABLE[ROWS * -1][---0.32]){

} else {

};
	arch
}
}
};
	--57 - rule(ROWS)
}
} else {

};
	if(( bin )){
	arch -= PARSE;
	-( -TABLE[com(0.98,-( -protect(97) ))][1 * ( COLS )] ) / protocol;
	( -810.8875 ) - ROWS
} else {

}
}
def bar(win){
	y += protocol;
	if(COLS){
	--TABLE[-TABLE[ROWS][bar(com(--PARSE,-TABLE[( -( --( ( bin ) ) ) )][COLS]),COLS)] - TABLE[( -64b )][--0.27]][( win )] + -COLS + ( destroy(-( ( x ) * all )) )
}
}
var y = -( betray(COLS / 64b,-TABLE[bar(35,( ( ( ROWS ) / TABLE[x][TABLE[-arch / arch][( TABLE[--520.4924][-0.72] )]] ) ),TABLE[-380.98][--( 64b ) + ( destroy(bar(-1)) ) / com(-( -930.7596 + ( com() ) * x ) / rule()) + win])][rule(--0.04)]) )
assert -510.58 : "What do we say to the Lord of Death?"
def com(all,64b){

}
def TABLE[-420.345][i] {

}
var y = ROWS
assert arch : "Winter is coming"
def rule(y,64b,protocol){

}
var win = rule(--TABLE[40][COLS] * com(-1))
def betray(protocol){
	rule(( 1 ),destroy(ROWS,bin));
	COLS
}
def betray(bin,win){

}
var 64b = -82
assert -450.045 : "One can not simply parse himself"
def bar(64b,bin,64b){

}
assert COLS : "Nothing burns like the cold."
assert ( ( ---19 ) ) : "Fear cuts deeper than swords."
assert com(x * destroy(protect(-y,bar(com(),( -1 ))),-bar(),-6) - 0.46 + -1 - protect(ROWS)) + -mislead(0.38) : "A mind needs books as a sword needs a whetstone, if it is to keep its edge."
var 64b = TABLE[x][protocol]
var all = -0.49
def rule(all){

}
var arch = bin
def TABLE[( -1 + com(x,1,-85) / ROWS )][j] {
	arch *= protect(-mislead(48,arch),y,protocol) / arch
}
def TABLE[ROWS][j] {
	if(-y / com()){
	win -= com(-0.11,win,0.06 * ( bin )) / destroy(--betray(ROWS,( -( x ) )),ROWS) - destroy(ROWS,-win);
	ROWS;
	if(64b * protect(--y,betray(ROWS,64b))){
	-1;
	if(-com(rule())){
	betray(y)
};
	win += ( PARSE )
} else {
	( TABLE[( ROWS )][-300.745] + -com(ROWS,bar(COLS),bin) ) + ROWS * rule(mislead(TABLE[COLS / PARSE][ROWS],COLS));
	all /= y;
	-( rule(-all - protocol * bar(--1,TABLE[( 0.92 )][0.44])) )
}
} else {
	protocol /= protect()
}
}
assert all - destroy(bar(-COLS),protect(),x) : "One can not simply parse himself"
def TABLE[protocol][k] {
	TABLE[-0.46][TABLE[protect() - -0.32][bin]];
	-( -ROWS );
	if(TABLE[ROWS][TABLE[-y * 0.98][-TABLE[( 3 )][betray(bin)]]]){
	protocol -= ( TABLE[( ---74 )][TABLE[ROWS][3]] );
	( -0.08 * ( ( betray(TABLE[--66][( PARSE ) + -( betray() / ROWS )]) ) ) - x );
	win *= protocol
}
}
def com(){
	if(( -1 )){

};
	arch *= -5
}
def mislead(all){
	protocol
}
def TABLE[destroy(--0.82,( com() ),rule(betray(96,-0.67,y),0.59))][i] {
	if(ROWS){
	if(rule()){
	if(-x){
	protocol
} else {

};
	win -= -ROWS
} else {
	all /= rule(COLS);
	TABLE[arch][( ( protocol ) )]
};
	protocol += all;
	PARSE += ROWS
} else {

};
	all
}
var protocol = betray(---0.16 / ( -84 )) * COLS
def betray(PARSE){
	( --0.54 ) - all;
	TABLE[( rule(64b,-com(-29,PARSE,PARSE)) )][0.68]
}
def TABLE[64b][i] {
	-bin / --COLS / 0.59;
	if(y * -COLS + ROWS - 0.18){
	if(destroy() - --( rule(-arch) ) * bar(COLS) + --33 + bin - destroy(( ( COLS ) )) - bar(490.0891,COLS,( win - 0.04 * com() ))){
	if(( betray(protocol,( -COLS + TABLE[TABLE[win][TABLE[betray(betray(( TABLE[-rule(-protect(COLS,( 31 )),-30) - mislead()][--76] ),COLS,-( COLS ) + bar(61)))][-0.52] - ( ROWS ) - bin]][ROWS] - --mislead(betray(-8,( protocol ),-bar(--mislead(ROWS / rule(protect(bar(ROWS,64b,-0.81),TABLE[rule(COLS,bin)][-y]) - ROWS),1) / ( betray(( -PARSE )) ) * ( ( -betray(y,--all,-58) ) ) - TABLE[win][COLS - ( --protect(ROWS,1) )],( TABLE[com(COLS)][ROWS] )) / arch + ( ( -0.09 ) )),COLS,( -0.39 )) + x )) )){
	protect(com(47,( bin )),-rule(TABLE[TABLE[TABLE[ROWS][protocol]][COLS] / ( bar() )][-mislead(protocol,arch)],ROWS,arch) - arch);
	bin += x
}
} else {

};
	if(-0.07){

}
};
	-64b + y - all
}
def mislead(x,y){

}
def TABLE[bin][i] {

}
assert ( protocol + ROWS ) : "A mind needs books as a sword needs a whetstone, if it is to keep its edge."
var win = -all
def TABLE[protect(-52,--ROWS)][k] {
	if(( protocol )){

}
}
def TABLE[-y][j] {

}
assert TABLE[--COLS][all] : "Winter is coming"
assert TABLE[all][COLS] : "One can not simply parse himself"
var protocol = com(all / -19,COLS)
def TABLE[bin][j] {

}
assert ( -COLS + -( all ) - bin + betray(arch) * ( betray(--97) ) - TABLE[( -destroy(-76,-0.99 - protocol - bar(-COLS,TABLE[rule(( destroy(COLS,y * COLS + ROWS - PARSE) ))][-82] + protect(protect(-all + 1,PARSE),-1 - 64b / destroy(( bin ),TABLE[( rule(1,TABLE[COLS][--1],-0.63) )][-25]))),TABLE[--arch][win]) )][-0.52] + --TABLE[-win][COLS] - -2 )
assert ( -1 )
def com(all){

}
def TABLE[rule(0.49,( 61 ),-com(( ( ( COLS ) ) ) * ( betray() ) * ( ROWS ) + -y))][i] {
	if(COLS){
	-win
} else {

}
}
def TABLE[-1][k] {
	if(COLS){
	if(( ROWS )){
	all;
	-( ( 64b ) );
	64b += betray(87)
}
};
	if(( COLS )){
	arch *= ( -0.55 );
	protocol
};
	all
}
def TABLE[( 85 )][i] {
	if(-31){
	( --com(-94) / x );
	if(protect(ROWS)){
	bar(( ( ( PARSE ) ) * rule() + -( ( protect(bar(-0.06,( --660.31 )),-0.09,y) ) ) )) / --TABLE[rule()][-680.8];
	if(-win){

} else {

};
	if(-com(-230.026,com(betray() - rule(ROWS + destroy(( ( destroy(( COLS ),( betray(all,COLS) / TABLE[ROWS][win] ),( ( protocol ) + 0.08 ) * bin) ) ),( COLS ))),ROWS),( PARSE ))){
	64b *= ( win )
} else {
	PARSE /= ( arch );
	bin *= -com(( 1 - 0.28 ),--38 / destroy(-( -940.23 ),( protect(win) ) + bin) + -bar(( -( all ) )),bar(-1) - -0.29 / all);
	if(( -0.21 + com(arch + com(COLS,( ROWS ),com(( -ROWS ),betray())) + COLS * bin) )){

} else {
	( --PARSE * COLS + -TABLE[--1][-betray(1,TABLE[( TABLE[COLS][( -39 + bar(com(( protect(TABLE[-TABLE[x][TABLE[---0.02 * all][all + ( 0.17 )]]][destroy(-500.1)],-y,protocol) ))) )] )][( all )])] );
	if(( COLS )){
	if(1){

} else {
	if(-0.85){
	win *= protect(( COLS ),mislead(-38));
	y -= arch;
	-ROWS
}
}
}
}
}
}
}
}
var protocol = 30
assert ( rule(-protocol,-protect(-mislead(bin)) / TABLE[0.85][COLS] / -0.12) )
var 64b = -1
def betray(64b,y){
	-0.32 * ( ( ( ROWS ) ) );
	bin += 71;
	protect(protocol)
}
def TABLE[x][k] {
	1;
	protocol / 39;
	all -= PARSE
}
var win = ROWS
var 64b = -1
def TABLE[-mislead(0.37,-52)][j] {
	-( -( 52 ) - bar(0.26,COLS) ) + 30.4;
	if(bin){

} else {
	if(( ( ( -0.6 ) ) )){
	ROWS;
	x *= bar(COLS,-620.03);
	-PARSE - rule(1,( 1 + betray(TABLE[( -22 )][( ROWS )]) * --( TABLE[bar(protect(bin,( COLS ),bar(40,ROWS,96)),95,( 64b ))][betray(bin) * --0.89] + ( COLS ) ) * destroy(( 0.5 + com(( ( bar(0.66) ) ),-( com(TABLE[-bin + ( bin )][-410.79],( -rule(( ( -COLS - TABLE[y][betray()] ) * ( ( ( -0.84 ) ) ) )) ),betray(( -0.87 ) + TABLE[win][( -87 ) * --0.63],-37)) )) )) ))
};
	PARSE
}
}
assert destroy(TABLE[TABLE[COLS][-0.24]][arch] * ROWS,com(protocol,( protocol )),rule(( 890.59 ),800.645 - rule(64b,rule(TABLE[-( destroy(64b,bar(-betray(-x,-( bar(win,( COLS ) * x) )),all)) ) + PARSE][arch * ( ROWS ) + rule(1,TABLE[( arch )][-0.79]) + 37 / win],ROWS))))
def rule(protocol,64b){
	if(-all){
	y /= -34 + ( bar(rule(PARSE)) )
}
}
var y = ( PARSE ) * ROWS
var PARSE = com(-730.8,1,bar(0.39,win / -all / ( destroy(( protocol - PARSE )) )) - betray(-1,( ROWS ),-37))
assert COLS : "One can not simply parse himself"
def betray(bin){

}
def TABLE[bar(COLS,( betray(( -1 ),( destroy() ) / --45 - ROWS,0.47 - 64b) ))][k] {
	if(( TABLE[-650.3 / -destroy(( -win ) - 0.07,betray() / y)][ROWS] ) * ( -( 0.7 ) )){
	betray(( 1 / -( TABLE[ROWS][TABLE[TABLE[64b][ROWS]][protect(-PARSE)]] + mislead(TABLE[all][mislead(ROWS)],ROWS - mislead(-mislead(rule(com(ROWS,protect(),x * PARSE)))) - COLS + betray(-42,( -44 - y )) - ( 27 ),0.2) + ROWS ) * ( 22 ) )) + bar(-530.73)
};
	-12
}
def TABLE[TABLE[-1][TABLE[-0.31 * all][( protocol )]]][j] {
	PARSE - protect()
}
var 64b = 64b
def TABLE[( -0.79 )][j] {
	-0.49
}
var PARSE = ( --540.3715 )
def betray(PARSE,protocol){
	if(betray(-0.51)){

} else {

};
	betray() / ( 59 )
}
var protocol = -0.36
assert -all
def protect(protocol,x){
	if(( 64b )){
	64b /= mislead();
	if(TABLE[( ROWS )][( ( COLS ) )]){

} else {
	win += ( COLS )
}
};
	if(( 11 )){
	PARSE;
	if(( bar(ROWS,all) )){
	win += -( x );
	x /= x * COLS
} else {
	win += PARSE;
	protocol *= ( protocol / -y )
}
};
	if(( ( y ) )){
	bin *= TABLE[( -( protect(all) / mislead(ROWS,-TABLE[12][-850.01 + all],all) ) )][rule(bar(protocol),ROWS)]
}
} 
def TABLE[---ROWS - --all][i] {
	( COLS )
}
def TABLE[betray(protect(-60,1,0.73 - ROWS * -bin * all),bin - mislead(PARSE,x,arch - bin),PARSE / -( -72 ) / -bar(-( COLS / --1 ),COLS) * PARSE)][k] {
	arch *= ( rule(all) - COLS )
}
assert 92

